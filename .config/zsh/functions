function f { # finds file
  find . -iname "*${1}*" }

function fdir { # finds dir
  find . -iname "*${1}*" -type d }

function fdir_no_git { # finds dir without git cluttering
  find . -iname "*${1}*" -type d -not -path "*/.git/*" }

function md { # mkdir and cd there, dir title is date when no arg provided
  local dir="${1:-$(date +%Y-%m-%d)}"
  mkdir -p "$dir" && cd "$dir" }

function mem { # "mem chrome" - prints mem usage and pid for chrome processes
  ps -ax -o rss,pid,user,command | sort -k1 -nr | /usr/bin/grep -i "$@" | \
    awk '{printf "%.1fMB", $1/1024; $1=""; print }' }

function grep_ip { # greps ip formatted
  /usr/bin/grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' "$@" }

function grep_url { # greps url formatted
  /usr/bin/grep -Eo '(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]*[-A-Za-z0-9+&@#/%=~_|]' "$@" }

function username {  # "username 8" - generate 8 usernames
  for i in {1..${1:-1}} ; do
    printf "%s%04d\n" \
      "$(awk 'length > 2 && length < 12 {print(tolower($0))}' \
      /usr/share/dict/words | grep -v "'" | sort -R | head -n2 | \
      tr "\n" "_" | iconv -f utf-8 -t ascii//TRANSLIT | sed 's/_$//')" \
      $((RANDOM % 10000))
  done }

# IMPORTANT: be carefull with the -rm flag, sometimes merging breaks certain txt
function pdf_merge { # merges pdf's with ghostscript and trashes old files
  local output_file="merged.pdf"
  local trash_files=false
  local input_files=()

  while [[ "$#" -gt 0 ]]; do
    case $1 in
      -o|--output) output_file="$2"; shift ;;
      -rm|--remove) trash_files=true ;;
      -*) echo "Unknown option: $1"; return 1 ;;
      *) input_files+=("$(realpath "$1" 2>/dev/null || echo "$1")") ;;
    esac
    shift
  done

  if [[ ${#input_files[@]} -lt 2 ]]; then
    echo "Usage: pdf_merge [-o output_file] [-rm] file1.pdf file2.pdf [file3.pdf ...]"
    return 1
  fi

  for file in "${input_files[@]}"; do
    if [[ ! -f "$file" ]]; then
      echo "ERROR: Input file '$file' does not exist"
      return 1
    fi
  done

  if ! gs -q -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE="$output_file" -dBATCH "${input_files[@]}"; then
    echo "ERROR: PDF merge failed"
    return 1
  fi

  if $trash_files; then
    if command -v trash >/dev/null 2>&1; then
      if trash "${input_files[@]}" 2>/dev/null; then
        echo "merged, input files moved to trash."
      else
        echo "ERROR: failed to move files to trash using 'trash' command"
        return 1
      fi
    else
      echo "Warning: 'trash' command not found. Falling back to moving files to ~/.Trash."
      local trash_dir="$HOME/.Trash"
      local timestamp=$(date +%Y%m%d%H%M%S)
      local failed=false
      for file in "${input_files[@]}"; do
        if ! mv "$file" "$trash_dir/$(basename "$file").$timestamp"; then
          echo "ERROR: failed to move '$file' to ~/.trash"
          failed=true
        fi
      done
      if ! $failed; then
        echo "> merged, input files moved to ~/.trash"
      else
        return 1
      fi
    fi
  fi }
